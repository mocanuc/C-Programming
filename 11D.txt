#include "stdafx.h"
#include<iostream>

class Node
{
public:
	int value; //This could really be any type
	Node* next;
	Node* prev;
	Node(int val) {
		std::cout << "Node constructr!" << std::endl;
		this->value = val;
		this->next = (Node*)0;
		this->prev = (Node*)0;
	}
	~Node() {
		std::cout << "Node destructor" << std::endl;
		std::cout << "I had the value " << this->value << std::endl;
	}
};
class List
{

public:
	Node* head;
	Node* tail;

	List() {
		std::cout << "List Constructor!" << std::endl;
		this->head = 0;
		this->tail = 0;
	}
	~List() {
		std::cout << "List destructor!" << std::endl;
	}
	void insert(Node* n, Node* x) {
		//Not actually perfect: how do we prepend to an existing list?
		if (n != 0) {
			x->next = n->next;
			n->next = x;
			x->prev = n;
			if (x->next != 0)
				x->next->prev = x;
		}
		if (this->head == 0) {
			this->head = x;
			this->tail = x;
			//x->prev = 0;
			//x->next = 0;
		}
		else if (this->tail == n) {
			this->tail = x;
		}
	}
	void display() {
		Node* i = this->head;
		std::cout << "List: ";
		while (i != 0) {
			std::cout << i->value << ",";
			i = i->next;
		}
		std::cout << std::endl;
	}
	void deleteNode(Node* y)
	{
		if ((this->head == 0) && (this->tail == 0))			//check if the list is empty
		{
			std::cout << "Node cannot be deleted because the list is empy." << std::endl;
		}
		else if (this->head == y)							//delete the head
		{
			this->head = this->head->next;
			delete(this->head->prev);
			this->head->prev = 0;
		}
		else if (this->tail == y)							//delete the tail
		{
			this->tail = this->tail->prev;
			delete(this->tail->next);
			this->tail->next = 0;
		}
		else
		{
			y->next->prev = y->prev;
			y->prev->next = y->next;
			delete(y);
		}
	}
};

int main(int argc, char *argv[])
{
	List* l = new List();
	//Node* y = new Node(5);
	l->insert(0, new Node(4));
	l->insert(l->head, new Node(6));
	l->insert(l->head, new Node(8));
	//l->insert(l->head, y);
	l->display();
	//l->deleteNode(l->head);
	l->deleteNode(l->tail);
	//l->deleteNode(y);
	l->display();

	delete l;

	return 0;
}

